.. _cli:

CLI Usage Guide
===============

Introduction
------------

After you have velocyto correctly installed on your machine the ``velocyto`` command will become available.
``velocyto`` is a command line tool with subcomands. You can get all the available commands typing ``velocyto --help``. You will get the following output.

.. include:: ../substitutions/velocyto.txt


You can further query for information on each subcommand by typing ``velocyto COMMANDNAME --help``.

Alternatively you can visit the online :ref:`api description page <cliapi>` that includes usage information for all the subcommands

Preparation
-----------
.. note::
   This step need to be performed **only once** per genome annotation. Execution time is ~1h

Download a genome annotation (.gtf file). For example if you use the default cellranger pipeline, this will be prepackaged and it can be downloaded `here <https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/references>`_. 



Prepare repeats annotation
--------------------------
.. note::
   This step is optional but recommended!

Dowloaded an appropriate mask repeat annotation (for example `from UCSC genome browser <https://genome.ucsc.edu/cgi-bin/hgTables?hgsid=611454127_NtvlaW6xBSIRYJEBI0iRDEWisITa&clade=mammal&org=Mouse&db=mm10&hgta_group=allTracks&hgta_track=rmsk&hgta_table=0&hgta_regionType=genome&position=chr12%3A56694976-56714605&hgta_outputType=primaryTable&hgta_outputType=gff&hgta_outFileName=mm10_rmsk.gtf>`_ and **remember to select GTF**  as output format).
And run the following command:

::

    velocyto extract_repeats mm10_rmsk.gtf

This will generate the file ``mm10_rmsk_joined.gtf``. (The command is sorting the file and merging very close repeats intervals into bigger intervals that will be masked in the downstream pipeline).


Run velocyto
------------

The general purpose command to start the pipeline for read counting is ``velocyto run``. The ``run`` subcommand logic is compatible with both 10X Genomics v1/v2 and InDrops 3' chemistry.
However, for data generated by 10X Genomics platform using the ``cellranger`` pipeline, we suggest to use the shortcut ``run10x`` described below.

A typical use of ``run`` is:

::

    velocyto run -b valid_barcodes.txt -o output_path -m mm10_rmsk_joined.gtf mapped_reads.bam mm10_gene_ivls.txt


The general signature for the ``run`` subcommand is:

.. include:: ../substitutions/run.txt

.. warning::
   Running velocyto run without specifying :code:`--bcfile` is not recommended:  it has not been appropriately tested yet.

The metadatatable is a csv file containing metadata of multiple samples. This will be transferred in the column attributes of the produced .loom file. It should be formatted as following:

Run on a single or multiple 10X Chromium samples
------------------------------------------------

``velocyto`` supports a shortcut to run directly on one or more `cellranger` output folders (e.g. this is the folder containing the subfolder: ``outs``, ``outs/analys`` and ``outs/filtered_gene_bc_matrices``).

For example if we want to run the pipeline on the folder ``mypath/sample01``. We would do:

::

    velocyto run10x -m mm10_rmsk_joined.gtf mypath/sample01 mm10_gene_ivls.txt

The full signature of the command is:

.. include:: ../substitutions/run10x.txt

In addition to ``run10x`` the comand ``multi10x`` allows running many samples at the same time in parallel.
For example the following commands will run all the samples present in ``parentfolder``, parallelizing the processing to up 8 samples at a time.

::

    velocyto multi10x -n 8 -l logfolder -m mm10_rmsk_joined.gtf parentfolder mm10_gene_ivls.txt

The logs of each process will be found inside ``logfolder``.

.. include:: ../substitutions/multi10x.txt


.. note::
    Execution time is ~2h30m per sample but might vary significantly by sequencing depth and cpu power. 


About the output .loom file
---------------------------

The main result file is a 4-layered `loom file <http://loompy.org/loompy-docs/format/index.html>`_ : `sample_id.loom`. 

A valid .loom file is simply an HDF5 file that contains specific groups representing the main matrix as well as row and column attributes.
Because of this, .loom files can be created and read by any language that supports HDF5. 

.loom files can be easily handled using the `loompy package <http://loompy.org>`_.
